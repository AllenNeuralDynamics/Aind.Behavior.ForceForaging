//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace AindForceForagingDataSchema.AindForceForagingTask
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Block
    {
    
        private System.Collections.Generic.List<Trial> _trials = new System.Collections.Generic.List<Trial>();
    
        private bool _shuffle = false;
    
        private int? _repeatCount;
    
        public Block()
        {
        }
    
        protected Block(Block other)
        {
            _trials = other._trials;
            _shuffle = other._shuffle;
            _repeatCount = other._repeatCount;
        }
    
        /// <summary>
        /// List of trials in the block
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("trials")]
        [System.ComponentModel.DescriptionAttribute("List of trials in the block")]
        public System.Collections.Generic.List<Trial> Trials
        {
            get
            {
                return _trials;
            }
            set
            {
                _trials = value;
            }
        }
    
        /// <summary>
        /// Whether to shuffle the trials in the block
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("shuffle")]
        [System.ComponentModel.DescriptionAttribute("Whether to shuffle the trials in the block")]
        public bool Shuffle
        {
            get
            {
                return _shuffle;
            }
            set
            {
                _shuffle = value;
            }
        }
    
        /// <summary>
        /// Number of times to repeat the block. If null, the block will be repeated indefinitely
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("repeat_count")]
        [System.ComponentModel.DescriptionAttribute("Number of times to repeat the block. If null, the block will be repeated indefini" +
            "tely")]
        public int? RepeatCount
        {
            get
            {
                return _repeatCount;
            }
            set
            {
                _repeatCount = value;
            }
        }
    
        public System.IObservable<Block> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Block(this)));
        }
    
        public System.IObservable<Block> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Block(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("trials = " + _trials + ", ");
            stringBuilder.Append("shuffle = " + _shuffle + ", ");
            stringBuilder.Append("repeat_count = " + _repeatCount);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class BlockedStatistics : EnvironmentStatistics
    {
    
        private System.Collections.Generic.List<Block> _blocks = new System.Collections.Generic.List<Block>();
    
        private bool _shuffle = false;
    
        private int? _repeatCount;
    
        public BlockedStatistics()
        {
        }
    
        protected BlockedStatistics(BlockedStatistics other) : 
                base(other)
        {
            _blocks = other._blocks;
            _shuffle = other._shuffle;
            _repeatCount = other._repeatCount;
        }
    
        /// <summary>
        /// List of blocks in the environment
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("blocks")]
        [System.ComponentModel.DescriptionAttribute("List of blocks in the environment")]
        public System.Collections.Generic.List<Block> Blocks
        {
            get
            {
                return _blocks;
            }
            set
            {
                _blocks = value;
            }
        }
    
        /// <summary>
        /// Whether to shuffle the blocks in the environment
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("shuffle")]
        [System.ComponentModel.DescriptionAttribute("Whether to shuffle the blocks in the environment")]
        public bool Shuffle
        {
            get
            {
                return _shuffle;
            }
            set
            {
                _shuffle = value;
            }
        }
    
        /// <summary>
        /// Number of times to repeat the environment. If null, the environment will be repeated indefinitely
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("repeat_count")]
        [System.ComponentModel.DescriptionAttribute("Number of times to repeat the environment. If null, the environment will be repea" +
            "ted indefinitely")]
        public int? RepeatCount
        {
            get
            {
                return _repeatCount;
            }
            set
            {
                _repeatCount = value;
            }
        }
    
        public System.IObservable<BlockedStatistics> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BlockedStatistics(this)));
        }
    
        public System.IObservable<BlockedStatistics> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BlockedStatistics(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("blocks = " + _blocks + ", ");
            stringBuilder.Append("shuffle = " + _shuffle + ", ");
            stringBuilder.Append("repeat_count = " + _repeatCount);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Environment
    {
    
        private EnvironmentStatistics _statistics;
    
        public Environment()
        {
        }
    
        protected Environment(Environment other)
        {
            _statistics = other._statistics;
        }
    
        /// <summary>
        /// Statistics of the environment
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("statistics", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Statistics of the environment")]
        public EnvironmentStatistics Statistics
        {
            get
            {
                return _statistics;
            }
            set
            {
                _statistics = value;
            }
        }
    
        public System.IObservable<Environment> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Environment(this)));
        }
    
        public System.IObservable<Environment> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Environment(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("statistics = " + _statistics);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "mode")]
    [JsonInheritanceAttribute("Block", typeof(BlockedStatistics))]
    [JsonInheritanceAttribute("RandomWalk", typeof(RandomWalkStatistics))]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class EnvironmentStatistics
    {
    
        public EnvironmentStatistics()
        {
        }
    
        protected EnvironmentStatistics(EnvironmentStatistics other)
        {
        }
    
        public System.IObservable<EnvironmentStatistics> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new EnvironmentStatistics(this)));
        }
    
        public System.IObservable<EnvironmentStatistics> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new EnvironmentStatistics(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "label")]
    [JsonInheritanceAttribute("LeftHarvestAction", typeof(LeftHarvestAction))]
    [JsonInheritanceAttribute("RightHarvestAction", typeof(RightHarvestAction))]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HarvestAction
    {
    
        public HarvestAction()
        {
        }
    
        protected HarvestAction(HarvestAction other)
        {
        }
    
        public System.IObservable<HarvestAction> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HarvestAction(this)));
        }
    
        public System.IObservable<HarvestAction> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HarvestAction(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class LeftHarvestAction : HarvestAction
    {
    
        private double _probability = 1D;
    
        private double _amount = 1D;
    
        private double _delay = 0D;
    
        private double _pressDuration = 5D;
    
        private double _pressForceThreshold = 5000D;
    
        public LeftHarvestAction()
        {
        }
    
        protected LeftHarvestAction(LeftHarvestAction other) : 
                base(other)
        {
            _probability = other._probability;
            _amount = other._amount;
            _delay = other._delay;
            _pressDuration = other._pressDuration;
            _pressForceThreshold = other._pressForceThreshold;
        }
    
        /// <summary>
        /// Probability of reward
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("probability")]
        [System.ComponentModel.DescriptionAttribute("Probability of reward")]
        public double Probability
        {
            get
            {
                return _probability;
            }
            set
            {
                _probability = value;
            }
        }
    
        /// <summary>
        /// Amount of reward to be delivered
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("amount")]
        [System.ComponentModel.DescriptionAttribute("Amount of reward to be delivered")]
        public double Amount
        {
            get
            {
                return _amount;
            }
            set
            {
                _amount = value;
            }
        }
    
        /// <summary>
        /// Delay between sucessful harvest and reward delivery
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("delay")]
        [System.ComponentModel.DescriptionAttribute("Delay between sucessful harvest and reward delivery")]
        public double Delay
        {
            get
            {
                return _delay;
            }
            set
            {
                _delay = value;
            }
        }
    
        /// <summary>
        /// Duration that the force much stay above threshold
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("press_duration")]
        [System.ComponentModel.DescriptionAttribute("Duration that the force much stay above threshold")]
        public double PressDuration
        {
            get
            {
                return _pressDuration;
            }
            set
            {
                _pressDuration = value;
            }
        }
    
        /// <summary>
        /// Force to be applied
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("press_force_threshold")]
        [System.ComponentModel.DescriptionAttribute("Force to be applied")]
        public double PressForceThreshold
        {
            get
            {
                return _pressForceThreshold;
            }
            set
            {
                _pressForceThreshold = value;
            }
        }
    
        public System.IObservable<LeftHarvestAction> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new LeftHarvestAction(this)));
        }
    
        public System.IObservable<LeftHarvestAction> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new LeftHarvestAction(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("probability = " + _probability + ", ");
            stringBuilder.Append("amount = " + _amount + ", ");
            stringBuilder.Append("delay = " + _delay + ", ");
            stringBuilder.Append("press_duration = " + _pressDuration + ", ");
            stringBuilder.Append("press_force_threshold = " + _pressForceThreshold);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class NumericalUpdater
    {
    
        private NumericalUpdaterOperation _operation = AindForceForagingDataSchema.AindForceForagingTask.NumericalUpdaterOperation.None;
    
        private NumericalUpdaterParameters _parameters;
    
        public NumericalUpdater()
        {
        }
    
        protected NumericalUpdater(NumericalUpdater other)
        {
            _operation = other._operation;
            _parameters = other._parameters;
        }
    
        /// <summary>
        /// Operation to perform on the parameter
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("operation")]
        [System.ComponentModel.DescriptionAttribute("Operation to perform on the parameter")]
        public NumericalUpdaterOperation Operation
        {
            get
            {
                return _operation;
            }
            set
            {
                _operation = value;
            }
        }
    
        /// <summary>
        /// Parameters of the updater
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the updater")]
        public NumericalUpdaterParameters Parameters
        {
            get
            {
                return _parameters;
            }
            set
            {
                _parameters = value;
            }
        }
    
        public System.IObservable<NumericalUpdater> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new NumericalUpdater(this)));
        }
    
        public System.IObservable<NumericalUpdater> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new NumericalUpdater(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("operation = " + _operation + ", ");
            stringBuilder.Append("parameters = " + _parameters);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum NumericalUpdaterOperation
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Offset")]
        Offset = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Gain")]
        Gain = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Set")]
        Set = 3,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="OffsetPercentage")]
        OffsetPercentage = 4,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class NumericalUpdaterParameters
    {
    
        private double _initialValue = 0D;
    
        private double _increment = 0D;
    
        private double _decrement = 0D;
    
        private double _minimum = 0D;
    
        private double _maximum = 0D;
    
        public NumericalUpdaterParameters()
        {
        }
    
        protected NumericalUpdaterParameters(NumericalUpdaterParameters other)
        {
            _initialValue = other._initialValue;
            _increment = other._increment;
            _decrement = other._decrement;
            _minimum = other._minimum;
            _maximum = other._maximum;
        }
    
        /// <summary>
        /// Initial value of the parameter
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("initial_value")]
        [System.ComponentModel.DescriptionAttribute("Initial value of the parameter")]
        public double InitialValue
        {
            get
            {
                return _initialValue;
            }
            set
            {
                _initialValue = value;
            }
        }
    
        /// <summary>
        /// Value to increment the parameter by
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("increment")]
        [System.ComponentModel.DescriptionAttribute("Value to increment the parameter by")]
        public double Increment
        {
            get
            {
                return _increment;
            }
            set
            {
                _increment = value;
            }
        }
    
        /// <summary>
        /// Value to decrement the parameter by
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("decrement")]
        [System.ComponentModel.DescriptionAttribute("Value to decrement the parameter by")]
        public double Decrement
        {
            get
            {
                return _decrement;
            }
            set
            {
                _decrement = value;
            }
        }
    
        /// <summary>
        /// Minimum value of the parameter
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("minimum")]
        [System.ComponentModel.DescriptionAttribute("Minimum value of the parameter")]
        public double Minimum
        {
            get
            {
                return _minimum;
            }
            set
            {
                _minimum = value;
            }
        }
    
        /// <summary>
        /// Minimum value of the parameter
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("maximum")]
        [System.ComponentModel.DescriptionAttribute("Minimum value of the parameter")]
        public double Maximum
        {
            get
            {
                return _maximum;
            }
            set
            {
                _maximum = value;
            }
        }
    
        public System.IObservable<NumericalUpdaterParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new NumericalUpdaterParameters(this)));
        }
    
        public System.IObservable<NumericalUpdaterParameters> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new NumericalUpdaterParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("initial_value = " + _initialValue + ", ");
            stringBuilder.Append("increment = " + _increment + ", ");
            stringBuilder.Append("decrement = " + _decrement + ", ");
            stringBuilder.Append("minimum = " + _minimum + ", ");
            stringBuilder.Append("maximum = " + _maximum);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class RandomWalkStatistics : EnvironmentStatistics
    {
    
        public RandomWalkStatistics()
        {
        }
    
        protected RandomWalkStatistics(RandomWalkStatistics other) : 
                base(other)
        {
        }
    
        public System.IObservable<RandomWalkStatistics> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new RandomWalkStatistics(this)));
        }
    
        public System.IObservable<RandomWalkStatistics> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new RandomWalkStatistics(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return base.PrintMembers(stringBuilder);
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class RightHarvestAction : HarvestAction
    {
    
        private double _probability = 1D;
    
        private double _amount = 1D;
    
        private double _delay = 0D;
    
        private double _pressDuration = 5D;
    
        private double _pressForceThreshold = 5000D;
    
        public RightHarvestAction()
        {
        }
    
        protected RightHarvestAction(RightHarvestAction other) : 
                base(other)
        {
            _probability = other._probability;
            _amount = other._amount;
            _delay = other._delay;
            _pressDuration = other._pressDuration;
            _pressForceThreshold = other._pressForceThreshold;
        }
    
        /// <summary>
        /// Probability of reward
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("probability")]
        [System.ComponentModel.DescriptionAttribute("Probability of reward")]
        public double Probability
        {
            get
            {
                return _probability;
            }
            set
            {
                _probability = value;
            }
        }
    
        /// <summary>
        /// Amount of reward to be delivered
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("amount")]
        [System.ComponentModel.DescriptionAttribute("Amount of reward to be delivered")]
        public double Amount
        {
            get
            {
                return _amount;
            }
            set
            {
                _amount = value;
            }
        }
    
        /// <summary>
        /// Delay between sucessful harvest and reward delivery
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("delay")]
        [System.ComponentModel.DescriptionAttribute("Delay between sucessful harvest and reward delivery")]
        public double Delay
        {
            get
            {
                return _delay;
            }
            set
            {
                _delay = value;
            }
        }
    
        /// <summary>
        /// Duration that the force much stay above threshold
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("press_duration")]
        [System.ComponentModel.DescriptionAttribute("Duration that the force much stay above threshold")]
        public double PressDuration
        {
            get
            {
                return _pressDuration;
            }
            set
            {
                _pressDuration = value;
            }
        }
    
        /// <summary>
        /// Force to be applied
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("press_force_threshold")]
        [System.ComponentModel.DescriptionAttribute("Force to be applied")]
        public double PressForceThreshold
        {
            get
            {
                return _pressForceThreshold;
            }
            set
            {
                _pressForceThreshold = value;
            }
        }
    
        public System.IObservable<RightHarvestAction> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new RightHarvestAction(this)));
        }
    
        public System.IObservable<RightHarvestAction> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new RightHarvestAction(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("probability = " + _probability + ", ");
            stringBuilder.Append("amount = " + _amount + ", ");
            stringBuilder.Append("delay = " + _delay + ", ");
            stringBuilder.Append("press_duration = " + _pressDuration + ", ");
            stringBuilder.Append("press_force_threshold = " + _pressForceThreshold);
            return true;
        }
    }


    /// <summary>
    /// Defines a trial
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Defines a trial")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Trial
    {
    
        private HarvestAction _leftAction;
    
        private HarvestAction _rightAction;
    
        private double _interTrialInterval = 0D;
    
        private double _timeOut = 0D;
    
        public Trial()
        {
        }
    
        protected Trial(Trial other)
        {
            _leftAction = other._leftAction;
            _rightAction = other._rightAction;
            _interTrialInterval = other._interTrialInterval;
            _timeOut = other._timeOut;
        }
    
        /// <summary>
        /// Specification of the left action
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("left_action")]
        [System.ComponentModel.DescriptionAttribute("Specification of the left action")]
        public HarvestAction LeftAction
        {
            get
            {
                return _leftAction;
            }
            set
            {
                _leftAction = value;
            }
        }
    
        /// <summary>
        /// Specification of the right action
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("right_action")]
        [System.ComponentModel.DescriptionAttribute("Specification of the right action")]
        public HarvestAction RightAction
        {
            get
            {
                return _rightAction;
            }
            set
            {
                _rightAction = value;
            }
        }
    
        /// <summary>
        /// Time between trials
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("inter_trial_interval")]
        [System.ComponentModel.DescriptionAttribute("Time between trials")]
        public double InterTrialInterval
        {
            get
            {
                return _interTrialInterval;
            }
            set
            {
                _interTrialInterval = value;
            }
        }
    
        /// <summary>
        /// Time out for the trial
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("time_out")]
        [System.ComponentModel.DescriptionAttribute("Time out for the trial")]
        public double TimeOut
        {
            get
            {
                return _timeOut;
            }
            set
            {
                _timeOut = value;
            }
        }
    
        public System.IObservable<Trial> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Trial(this)));
        }
    
        public System.IObservable<Trial> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Trial(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("left_action = " + _leftAction + ", ");
            stringBuilder.Append("right_action = " + _rightAction + ", ");
            stringBuilder.Append("inter_trial_interval = " + _interTrialInterval + ", ");
            stringBuilder.Append("time_out = " + _timeOut);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class AindForceForagingTaskLogic
    {
    
        private string _describedBy = "";
    
        private string _schemaVersion = "0.1.0-preview01";
    
        private Environment _environment = new Environment();
    
        private System.Collections.Generic.IDictionary<string, NumericalUpdater> _updaters;
    
        public AindForceForagingTaskLogic()
        {
        }
    
        protected AindForceForagingTaskLogic(AindForceForagingTaskLogic other)
        {
            _describedBy = other._describedBy;
            _schemaVersion = other._schemaVersion;
            _environment = other._environment;
            _updaters = other._updaters;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("describedBy")]
        public string DescribedBy
        {
            get
            {
                return _describedBy;
            }
            set
            {
                _describedBy = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("schema_version")]
        public string SchemaVersion
        {
            get
            {
                return _schemaVersion;
            }
            set
            {
                _schemaVersion = value;
            }
        }
    
        /// <summary>
        /// Environment settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("environment", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Environment settings")]
        public Environment Environment
        {
            get
            {
                return _environment;
            }
            set
            {
                _environment = value;
            }
        }
    
        /// <summary>
        /// List of numerical updaters
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("updaters")]
        [System.ComponentModel.DescriptionAttribute("List of numerical updaters")]
        public System.Collections.Generic.IDictionary<string, NumericalUpdater> Updaters
        {
            get
            {
                return _updaters;
            }
            set
            {
                _updaters = value;
            }
        }
    
        public System.IObservable<AindForceForagingTaskLogic> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AindForceForagingTaskLogic(this)));
        }
    
        public System.IObservable<AindForceForagingTaskLogic> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AindForceForagingTaskLogic(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("describedBy = " + _describedBy + ", ");
            stringBuilder.Append("schema_version = " + _schemaVersion + ", ");
            stringBuilder.Append("environment = " + _environment + ", ");
            stringBuilder.Append("updaters = " + _updaters);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface, AllowMultiple = true)]
    internal class JsonInheritanceAttribute : System.Attribute
    {
        public JsonInheritanceAttribute(string key, System.Type type)
        {
            Key = key;
            Type = type;
        }

        public string Key { get; private set; }

        public System.Type Type { get; private set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public class JsonInheritanceConverter : Newtonsoft.Json.JsonConverter
    {
        internal static readonly string DefaultDiscriminatorName = "discriminator";

        private readonly string _discriminatorName;

        [System.ThreadStatic]
        private static bool _isReading;

        [System.ThreadStatic]
        private static bool _isWriting;

        public JsonInheritanceConverter()
        {
            _discriminatorName = DefaultDiscriminatorName;
        }

        public JsonInheritanceConverter(string discriminatorName)
        {
            _discriminatorName = discriminatorName;
        }

        public string DiscriminatorName { get { return _discriminatorName; } }

        public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
        {
            try
            {
                _isWriting = true;

                var jObject = Newtonsoft.Json.Linq.JObject.FromObject(value, serializer);
                jObject.AddFirst(new Newtonsoft.Json.Linq.JProperty(_discriminatorName, GetSubtypeDiscriminator(value.GetType())));
                writer.WriteToken(jObject.CreateReader());
            }
            finally
            {
                _isWriting = false;
            }
        }

        public override bool CanWrite
        {
            get
            {
                if (_isWriting)
                {
                    _isWriting = false;
                    return false;
                }
                return true;
            }
        }

        public override bool CanRead
        {
            get
            {
                if (_isReading)
                {
                    _isReading = false;
                    return false;
                }
                return true;
            }
        }

        public override bool CanConvert(System.Type objectType)
        {
            return true;
        }

        public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
        {
            var jObject = serializer.Deserialize<Newtonsoft.Json.Linq.JObject>(reader);
            if (jObject == null)
                return null;

            var discriminatorValue = jObject.GetValue(_discriminatorName);
            var discriminator = discriminatorValue != null ? Newtonsoft.Json.Linq.Extensions.Value<string>(discriminatorValue) : null;
            var subtype = GetObjectSubtype(objectType, discriminator);

            var objectContract = serializer.ContractResolver.ResolveContract(subtype) as Newtonsoft.Json.Serialization.JsonObjectContract;
            if (objectContract == null || System.Linq.Enumerable.All(objectContract.Properties, p => p.PropertyName != _discriminatorName))
            {
                jObject.Remove(_discriminatorName);
            }

            try
            {
                _isReading = true;
                return serializer.Deserialize(jObject.CreateReader(), subtype);
            }
            finally
            {
                _isReading = false;
            }
        }

        private System.Type GetObjectSubtype(System.Type objectType, string discriminator)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Key == discriminator)
                    return attribute.Type;
            }

            return objectType;
        }

        private string GetSubtypeDiscriminator(System.Type objectType)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Type == objectType)
                    return attribute.Key;
            }

            return objectType.Name;
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Combinator)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BlockedStatistics>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RandomWalkStatistics>))]
    public partial class MatchEnvironmentStatistics : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = Type;
            var returnType = typeMapping != null ? typeMapping.GetType().GetGenericArguments()[0] : typeof(EnvironmentStatistics);
            return System.Linq.Expressions.Expression.Call(
                typeof(MatchEnvironmentStatistics),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

    
        private static System.IObservable<TResult> Process<TResult>(System.IObservable<EnvironmentStatistics> source)
            where TResult : EnvironmentStatistics
        {
            return System.Reactive.Linq.Observable.Create<TResult>(observer =>
            {
                var sourceObserver = System.Reactive.Observer.Create<EnvironmentStatistics>(
                    value =>
                    {
                        var match = value as TResult;
                        if (match != null) observer.OnNext(match);
                    },
                    observer.OnError,
                    observer.OnCompleted);
                return System.ObservableExtensions.SubscribeSafe(source, sourceObserver);
            });
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Combinator)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LeftHarvestAction>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RightHarvestAction>))]
    public partial class MatchHarvestAction : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = Type;
            var returnType = typeMapping != null ? typeMapping.GetType().GetGenericArguments()[0] : typeof(HarvestAction);
            return System.Linq.Expressions.Expression.Call(
                typeof(MatchHarvestAction),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

    
        private static System.IObservable<TResult> Process<TResult>(System.IObservable<HarvestAction> source)
            where TResult : HarvestAction
        {
            return System.Reactive.Linq.Observable.Create<TResult>(observer =>
            {
                var sourceObserver = System.Reactive.Observer.Create<HarvestAction>(
                    value =>
                    {
                        var match = value as TResult;
                        if (match != null) observer.OnNext(match);
                    },
                    observer.OnError,
                    observer.OnCompleted);
                return System.ObservableExtensions.SubscribeSafe(source, sourceObserver);
            });
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into JSON strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into JSON strings.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    public partial class SerializeToJson
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.SerializeObject(value));
        }

        public System.IObservable<string> Process(System.IObservable<Block> source)
        {
            return Process<Block>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BlockedStatistics> source)
        {
            return Process<BlockedStatistics>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Environment> source)
        {
            return Process<Environment>(source);
        }

        public System.IObservable<string> Process(System.IObservable<EnvironmentStatistics> source)
        {
            return Process<EnvironmentStatistics>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarvestAction> source)
        {
            return Process<HarvestAction>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LeftHarvestAction> source)
        {
            return Process<LeftHarvestAction>(source);
        }

        public System.IObservable<string> Process(System.IObservable<NumericalUpdater> source)
        {
            return Process<NumericalUpdater>(source);
        }

        public System.IObservable<string> Process(System.IObservable<NumericalUpdaterParameters> source)
        {
            return Process<NumericalUpdaterParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RandomWalkStatistics> source)
        {
            return Process<RandomWalkStatistics>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RightHarvestAction> source)
        {
            return Process<RightHarvestAction>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Trial> source)
        {
            return Process<Trial>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindForceForagingTaskLogic> source)
        {
            return Process<AindForceForagingTaskLogic>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of JSON strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of JSON strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Block>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BlockedStatistics>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Environment>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<EnvironmentStatistics>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarvestAction>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LeftHarvestAction>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<NumericalUpdater>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<NumericalUpdaterParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RandomWalkStatistics>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RightHarvestAction>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Trial>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindForceForagingTaskLogic>))]
    public partial class DeserializeFromJson : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromJson()
        {
            Type = new Bonsai.Expressions.TypeMapping<AindForceForagingTaskLogic>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromJson),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.DeserializeObject<T>(value));
        }
    }
}