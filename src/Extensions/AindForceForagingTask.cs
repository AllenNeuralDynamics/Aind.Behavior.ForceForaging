//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace AindForceForagingDataSchema.AindForceForagingTask
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class BetaDistribution : Distribution
    {
    
        private BetaDistributionParameters _distributionParameters;
    
        private TruncationParameters _truncationParameters;
    
        private ScalingParameters _scalingParameters;
    
        public BetaDistribution()
        {
        }
    
        protected BetaDistribution(BetaDistribution other) : 
                base(other)
        {
            _distributionParameters = other._distributionParameters;
            _truncationParameters = other._truncationParameters;
            _scalingParameters = other._scalingParameters;
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public BetaDistributionParameters DistributionParameters
        {
            get
            {
                return _distributionParameters;
            }
            set
            {
                _distributionParameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters TruncationParameters
        {
            get
            {
                return _truncationParameters;
            }
            set
            {
                _truncationParameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters ScalingParameters
        {
            get
            {
                return _scalingParameters;
            }
            set
            {
                _scalingParameters = value;
            }
        }
    
        public System.IObservable<BetaDistribution> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BetaDistribution(this)));
        }
    
        public System.IObservable<BetaDistribution> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BetaDistribution(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("distribution_parameters = " + _distributionParameters + ", ");
            stringBuilder.Append("truncation_parameters = " + _truncationParameters + ", ");
            stringBuilder.Append("scaling_parameters = " + _scalingParameters);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class BetaDistributionParameters
    {
    
        private string _family = "Beta";
    
        private double _alpha = 5D;
    
        private double _beta = 5D;
    
        public BetaDistributionParameters()
        {
        }
    
        protected BetaDistributionParameters(BetaDistributionParameters other)
        {
            _family = other._family;
            _alpha = other._alpha;
            _beta = other._beta;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Alpha parameter of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("alpha")]
        [System.ComponentModel.DescriptionAttribute("Alpha parameter of the distribution")]
        public double Alpha
        {
            get
            {
                return _alpha;
            }
            set
            {
                _alpha = value;
            }
        }
    
        /// <summary>
        /// Beta parameter of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("beta")]
        [System.ComponentModel.DescriptionAttribute("Beta parameter of the distribution")]
        public double Beta
        {
            get
            {
                return _beta;
            }
            set
            {
                _beta = value;
            }
        }
    
        public System.IObservable<BetaDistributionParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BetaDistributionParameters(this)));
        }
    
        public System.IObservable<BetaDistributionParameters> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BetaDistributionParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("family = " + _family + ", ");
            stringBuilder.Append("alpha = " + _alpha + ", ");
            stringBuilder.Append("beta = " + _beta);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class BinomialDistribution : Distribution
    {
    
        private BinomialDistributionParameters _distributionParameters;
    
        private TruncationParameters _truncationParameters;
    
        private ScalingParameters _scalingParameters;
    
        public BinomialDistribution()
        {
        }
    
        protected BinomialDistribution(BinomialDistribution other) : 
                base(other)
        {
            _distributionParameters = other._distributionParameters;
            _truncationParameters = other._truncationParameters;
            _scalingParameters = other._scalingParameters;
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public BinomialDistributionParameters DistributionParameters
        {
            get
            {
                return _distributionParameters;
            }
            set
            {
                _distributionParameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters TruncationParameters
        {
            get
            {
                return _truncationParameters;
            }
            set
            {
                _truncationParameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters ScalingParameters
        {
            get
            {
                return _scalingParameters;
            }
            set
            {
                _scalingParameters = value;
            }
        }
    
        public System.IObservable<BinomialDistribution> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BinomialDistribution(this)));
        }
    
        public System.IObservable<BinomialDistribution> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BinomialDistribution(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("distribution_parameters = " + _distributionParameters + ", ");
            stringBuilder.Append("truncation_parameters = " + _truncationParameters + ", ");
            stringBuilder.Append("scaling_parameters = " + _scalingParameters);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class BinomialDistributionParameters
    {
    
        private string _family = "Binomial";
    
        private int _n = 1;
    
        private double _p = 0.5D;
    
        public BinomialDistributionParameters()
        {
        }
    
        protected BinomialDistributionParameters(BinomialDistributionParameters other)
        {
            _family = other._family;
            _n = other._n;
            _p = other._p;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Number of trials
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("n")]
        [System.ComponentModel.DescriptionAttribute("Number of trials")]
        public int N
        {
            get
            {
                return _n;
            }
            set
            {
                _n = value;
            }
        }
    
        /// <summary>
        /// Probability of success
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("p")]
        [System.ComponentModel.DescriptionAttribute("Probability of success")]
        public double P
        {
            get
            {
                return _p;
            }
            set
            {
                _p = value;
            }
        }
    
        public System.IObservable<BinomialDistributionParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BinomialDistributionParameters(this)));
        }
    
        public System.IObservable<BinomialDistributionParameters> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BinomialDistributionParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("family = " + _family + ", ");
            stringBuilder.Append("n = " + _n + ", ");
            stringBuilder.Append("p = " + _p);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Block : BlockStatistics
    {
    
        private System.Collections.Generic.List<Trial> _trials = new System.Collections.Generic.List<Trial>();
    
        private bool _shuffle = false;
    
        private int? _repeatCount;
    
        public Block()
        {
        }
    
        protected Block(Block other) : 
                base(other)
        {
            _trials = other._trials;
            _shuffle = other._shuffle;
            _repeatCount = other._repeatCount;
        }
    
        /// <summary>
        /// List of trials in the block
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("trials")]
        [System.ComponentModel.DescriptionAttribute("List of trials in the block")]
        public System.Collections.Generic.List<Trial> Trials
        {
            get
            {
                return _trials;
            }
            set
            {
                _trials = value;
            }
        }
    
        /// <summary>
        /// Whether to shuffle the trials in the block
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("shuffle")]
        [System.ComponentModel.DescriptionAttribute("Whether to shuffle the trials in the block")]
        public bool Shuffle
        {
            get
            {
                return _shuffle;
            }
            set
            {
                _shuffle = value;
            }
        }
    
        /// <summary>
        /// Number of times to repeat the block. If null, the block will be repeated indefinitely
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("repeat_count")]
        [System.ComponentModel.DescriptionAttribute("Number of times to repeat the block. If null, the block will be repeated indefini" +
            "tely")]
        public int? RepeatCount
        {
            get
            {
                return _repeatCount;
            }
            set
            {
                _repeatCount = value;
            }
        }
    
        public System.IObservable<Block> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Block(this)));
        }
    
        public System.IObservable<Block> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Block(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("trials = " + _trials + ", ");
            stringBuilder.Append("shuffle = " + _shuffle + ", ");
            stringBuilder.Append("repeat_count = " + _repeatCount);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class BlockGenerator : BlockStatistics
    {
    
        private bool _baited = false;
    
        private Distribution _blockSize;
    
        private EndBlockCriteria _endBlockCriteria;
    
        public BlockGenerator()
        {
        }
    
        protected BlockGenerator(BlockGenerator other) : 
                base(other)
        {
            _baited = other._baited;
            _blockSize = other._blockSize;
            _endBlockCriteria = other._endBlockCriteria;
        }
    
        /// <summary>
        /// Whether the trials are baited
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("baited")]
        [System.ComponentModel.DescriptionAttribute("Whether the trials are baited")]
        public bool Baited
        {
            get
            {
                return _baited;
            }
            set
            {
                _baited = value;
            }
        }
    
        /// <summary>
        /// Size of the block
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("block_size")]
        [System.ComponentModel.DescriptionAttribute("Size of the block")]
        public Distribution BlockSize
        {
            get
            {
                return _blockSize;
            }
            set
            {
                _blockSize = value;
            }
        }
    
        /// <summary>
        /// Criteria to end the block
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("end_block_criteria")]
        [System.ComponentModel.DescriptionAttribute("Criteria to end the block")]
        public EndBlockCriteria EndBlockCriteria
        {
            get
            {
                return _endBlockCriteria;
            }
            set
            {
                _endBlockCriteria = value;
            }
        }
    
        public System.IObservable<BlockGenerator> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BlockGenerator(this)));
        }
    
        public System.IObservable<BlockGenerator> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BlockGenerator(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("baited = " + _baited + ", ");
            stringBuilder.Append("block_size = " + _blockSize + ", ");
            stringBuilder.Append("end_block_criteria = " + _endBlockCriteria);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "mode")]
    [JsonInheritanceAttribute("Block", typeof(Block))]
    [JsonInheritanceAttribute("BlockGenerator", typeof(BlockGenerator))]
    [JsonInheritanceAttribute("RandomWalk", typeof(RandomWalk))]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class BlockStatistics
    {
    
        public BlockStatistics()
        {
        }
    
        protected BlockStatistics(BlockStatistics other)
        {
        }
    
        public System.IObservable<BlockStatistics> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BlockStatistics(this)));
        }
    
        public System.IObservable<BlockStatistics> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BlockStatistics(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "family")]
    [JsonInheritanceAttribute("Scalar", typeof(Scalar))]
    [JsonInheritanceAttribute("Normal", typeof(NormalDistribution))]
    [JsonInheritanceAttribute("LogNormal", typeof(LogNormalDistribution))]
    [JsonInheritanceAttribute("Exponential", typeof(ExponentialDistribution))]
    [JsonInheritanceAttribute("Uniform", typeof(UniformDistribution))]
    [JsonInheritanceAttribute("Poisson", typeof(PoissonDistribution))]
    [JsonInheritanceAttribute("Binomial", typeof(BinomialDistribution))]
    [JsonInheritanceAttribute("Beta", typeof(BetaDistribution))]
    [JsonInheritanceAttribute("Gamma", typeof(GammaDistribution))]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Distribution
    {
    
        public Distribution()
        {
        }
    
        protected Distribution(Distribution other)
        {
        }
    
        public System.IObservable<Distribution> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Distribution(this)));
        }
    
        public System.IObservable<Distribution> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Distribution(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class EndBlockCriteria
    {
    
        public EndBlockCriteria()
        {
        }
    
        protected EndBlockCriteria(EndBlockCriteria other)
        {
        }
    
        public System.IObservable<EndBlockCriteria> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new EndBlockCriteria(this)));
        }
    
        public System.IObservable<EndBlockCriteria> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new EndBlockCriteria(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Environment
    {
    
        private System.Collections.Generic.List<BlockStatistics> _blockStatistics = new System.Collections.Generic.List<BlockStatistics>();
    
        private bool _shuffle = false;
    
        private int? _repeatCount;
    
        public Environment()
        {
        }
    
        protected Environment(Environment other)
        {
            _blockStatistics = other._blockStatistics;
            _shuffle = other._shuffle;
            _repeatCount = other._repeatCount;
        }
    
        /// <summary>
        /// Statistics of the environment
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("block_statistics", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Statistics of the environment")]
        public System.Collections.Generic.List<BlockStatistics> BlockStatistics
        {
            get
            {
                return _blockStatistics;
            }
            set
            {
                _blockStatistics = value;
            }
        }
    
        /// <summary>
        /// Whether to shuffle the blocks
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("shuffle")]
        [System.ComponentModel.DescriptionAttribute("Whether to shuffle the blocks")]
        public bool Shuffle
        {
            get
            {
                return _shuffle;
            }
            set
            {
                _shuffle = value;
            }
        }
    
        /// <summary>
        /// Number of times to repeat the environment. If null, the environment will be repeated indefinitely
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("repeat_count")]
        [System.ComponentModel.DescriptionAttribute("Number of times to repeat the environment. If null, the environment will be repea" +
            "ted indefinitely")]
        public int? RepeatCount
        {
            get
            {
                return _repeatCount;
            }
            set
            {
                _repeatCount = value;
            }
        }
    
        public System.IObservable<Environment> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Environment(this)));
        }
    
        public System.IObservable<Environment> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Environment(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("block_statistics = " + _blockStatistics + ", ");
            stringBuilder.Append("shuffle = " + _shuffle + ", ");
            stringBuilder.Append("repeat_count = " + _repeatCount);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ExponentialDistribution : Distribution
    {
    
        private ExponentialDistributionParameters _distributionParameters;
    
        private TruncationParameters _truncationParameters;
    
        private ScalingParameters _scalingParameters;
    
        public ExponentialDistribution()
        {
        }
    
        protected ExponentialDistribution(ExponentialDistribution other) : 
                base(other)
        {
            _distributionParameters = other._distributionParameters;
            _truncationParameters = other._truncationParameters;
            _scalingParameters = other._scalingParameters;
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public ExponentialDistributionParameters DistributionParameters
        {
            get
            {
                return _distributionParameters;
            }
            set
            {
                _distributionParameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters TruncationParameters
        {
            get
            {
                return _truncationParameters;
            }
            set
            {
                _truncationParameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters ScalingParameters
        {
            get
            {
                return _scalingParameters;
            }
            set
            {
                _scalingParameters = value;
            }
        }
    
        public System.IObservable<ExponentialDistribution> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ExponentialDistribution(this)));
        }
    
        public System.IObservable<ExponentialDistribution> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ExponentialDistribution(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("distribution_parameters = " + _distributionParameters + ", ");
            stringBuilder.Append("truncation_parameters = " + _truncationParameters + ", ");
            stringBuilder.Append("scaling_parameters = " + _scalingParameters);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ExponentialDistributionParameters
    {
    
        private string _family = "Exponential";
    
        private double _rate = 0D;
    
        public ExponentialDistributionParameters()
        {
        }
    
        protected ExponentialDistributionParameters(ExponentialDistributionParameters other)
        {
            _family = other._family;
            _rate = other._rate;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Rate parameter of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rate")]
        [System.ComponentModel.DescriptionAttribute("Rate parameter of the distribution")]
        public double Rate
        {
            get
            {
                return _rate;
            }
            set
            {
                _rate = value;
            }
        }
    
        public System.IObservable<ExponentialDistributionParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ExponentialDistributionParameters(this)));
        }
    
        public System.IObservable<ExponentialDistributionParameters> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ExponentialDistributionParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("family = " + _family + ", ");
            stringBuilder.Append("rate = " + _rate);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class GammaDistribution : Distribution
    {
    
        private GammaDistributionParameters _distributionParameters;
    
        private TruncationParameters _truncationParameters;
    
        private ScalingParameters _scalingParameters;
    
        public GammaDistribution()
        {
        }
    
        protected GammaDistribution(GammaDistribution other) : 
                base(other)
        {
            _distributionParameters = other._distributionParameters;
            _truncationParameters = other._truncationParameters;
            _scalingParameters = other._scalingParameters;
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public GammaDistributionParameters DistributionParameters
        {
            get
            {
                return _distributionParameters;
            }
            set
            {
                _distributionParameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters TruncationParameters
        {
            get
            {
                return _truncationParameters;
            }
            set
            {
                _truncationParameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters ScalingParameters
        {
            get
            {
                return _scalingParameters;
            }
            set
            {
                _scalingParameters = value;
            }
        }
    
        public System.IObservable<GammaDistribution> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new GammaDistribution(this)));
        }
    
        public System.IObservable<GammaDistribution> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new GammaDistribution(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("distribution_parameters = " + _distributionParameters + ", ");
            stringBuilder.Append("truncation_parameters = " + _truncationParameters + ", ");
            stringBuilder.Append("scaling_parameters = " + _scalingParameters);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class GammaDistributionParameters
    {
    
        private string _family = "Gamma";
    
        private double _shape = 1D;
    
        private double _rate = 1D;
    
        public GammaDistributionParameters()
        {
        }
    
        protected GammaDistributionParameters(GammaDistributionParameters other)
        {
            _family = other._family;
            _shape = other._shape;
            _rate = other._rate;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Shape parameter of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("shape")]
        [System.ComponentModel.DescriptionAttribute("Shape parameter of the distribution")]
        public double Shape
        {
            get
            {
                return _shape;
            }
            set
            {
                _shape = value;
            }
        }
    
        /// <summary>
        /// Rate parameter of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rate")]
        [System.ComponentModel.DescriptionAttribute("Rate parameter of the distribution")]
        public double Rate
        {
            get
            {
                return _rate;
            }
            set
            {
                _rate = value;
            }
        }
    
        public System.IObservable<GammaDistributionParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new GammaDistributionParameters(this)));
        }
    
        public System.IObservable<GammaDistributionParameters> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new GammaDistributionParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("family = " + _family + ", ");
            stringBuilder.Append("shape = " + _shape + ", ");
            stringBuilder.Append("rate = " + _rate);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Defines an abstract class for an harvest action
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Defines an abstract class for an harvest action")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HarvestAction
    {
    
        private HarvestActionLabel _action = AindForceForagingDataSchema.AindForceForagingTask.HarvestActionLabel.None;
    
        private double _probability = 1D;
    
        private double _amount = 1D;
    
        private double _delay = 0D;
    
        private double _forceDuration = 0.5D;
    
        private double _forceThreshold = 5000D;
    
        private bool _isOperant = true;
    
        private bool _hasCue = true;
    
        private double? _timeToCollect;
    
        public HarvestAction()
        {
        }
    
        protected HarvestAction(HarvestAction other)
        {
            _action = other._action;
            _probability = other._probability;
            _amount = other._amount;
            _delay = other._delay;
            _forceDuration = other._forceDuration;
            _forceThreshold = other._forceThreshold;
            _isOperant = other._isOperant;
            _hasCue = other._hasCue;
            _timeToCollect = other._timeToCollect;
        }
    
        /// <summary>
        /// Label of the action
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("action")]
        [System.ComponentModel.DescriptionAttribute("Label of the action")]
        public HarvestActionLabel Action
        {
            get
            {
                return _action;
            }
            set
            {
                _action = value;
            }
        }
    
        /// <summary>
        /// Probability of reward
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("probability")]
        [System.ComponentModel.DescriptionAttribute("Probability of reward")]
        public double Probability
        {
            get
            {
                return _probability;
            }
            set
            {
                _probability = value;
            }
        }
    
        /// <summary>
        /// Amount of reward to be delivered
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("amount")]
        [System.ComponentModel.DescriptionAttribute("Amount of reward to be delivered")]
        public double Amount
        {
            get
            {
                return _amount;
            }
            set
            {
                _amount = value;
            }
        }
    
        /// <summary>
        /// Delay between successful harvest and reward delivery
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("delay")]
        [System.ComponentModel.DescriptionAttribute("Delay between successful harvest and reward delivery")]
        public double Delay
        {
            get
            {
                return _delay;
            }
            set
            {
                _delay = value;
            }
        }
    
        /// <summary>
        /// Duration that the force much stay above threshold
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("force_duration")]
        [System.ComponentModel.DescriptionAttribute("Duration that the force much stay above threshold")]
        public double ForceDuration
        {
            get
            {
                return _forceDuration;
            }
            set
            {
                _forceDuration = value;
            }
        }
    
        /// <summary>
        /// Force to be applied
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("force_threshold")]
        [System.ComponentModel.DescriptionAttribute("Force to be applied")]
        public double ForceThreshold
        {
            get
            {
                return _forceThreshold;
            }
            set
            {
                _forceThreshold = value;
            }
        }
    
        /// <summary>
        /// Whether the reward delivery is contingent on licking.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("is_operant")]
        [System.ComponentModel.DescriptionAttribute("Whether the reward delivery is contingent on licking.")]
        public bool IsOperant
        {
            get
            {
                return _isOperant;
            }
            set
            {
                _isOperant = value;
            }
        }
    
        /// <summary>
        /// Whether to use a cue to signal the availability of the reward.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("has_cue")]
        [System.ComponentModel.DescriptionAttribute("Whether to use a cue to signal the availability of the reward.")]
        public bool HasCue
        {
            get
            {
                return _hasCue;
            }
            set
            {
                _hasCue = value;
            }
        }
    
        /// <summary>
        /// Time to collect the reward after it is available. If null, the reward will be available indefinitely.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("time_to_collect")]
        [System.ComponentModel.DescriptionAttribute("Time to collect the reward after it is available. If null, the reward will be ava" +
            "ilable indefinitely.")]
        public double? TimeToCollect
        {
            get
            {
                return _timeToCollect;
            }
            set
            {
                _timeToCollect = value;
            }
        }
    
        public System.IObservable<HarvestAction> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HarvestAction(this)));
        }
    
        public System.IObservable<HarvestAction> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HarvestAction(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("action = " + _action + ", ");
            stringBuilder.Append("probability = " + _probability + ", ");
            stringBuilder.Append("amount = " + _amount + ", ");
            stringBuilder.Append("delay = " + _delay + ", ");
            stringBuilder.Append("force_duration = " + _forceDuration + ", ");
            stringBuilder.Append("force_threshold = " + _forceThreshold + ", ");
            stringBuilder.Append("is_operant = " + _isOperant + ", ");
            stringBuilder.Append("has_cue = " + _hasCue + ", ");
            stringBuilder.Append("time_to_collect = " + _timeToCollect);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Defines the harvest actions
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum HarvestActionLabel
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Left")]
        Left = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Right")]
        Right = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
        None = 2,
    }


    /// <summary>
    /// Defines an initiation period
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Defines an initiation period")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class InitiationPeriod
    {
    
        private double _duration = 0D;
    
        private bool _hasCue = true;
    
        private bool _abortOnForce = false;
    
        private double _abortOnForceThreshold = 0D;
    
        public InitiationPeriod()
        {
        }
    
        protected InitiationPeriod(InitiationPeriod other)
        {
            _duration = other._duration;
            _hasCue = other._hasCue;
            _abortOnForce = other._abortOnForce;
            _abortOnForceThreshold = other._abortOnForceThreshold;
        }
    
        /// <summary>
        /// Duration of the initiation period
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("duration")]
        [System.ComponentModel.DescriptionAttribute("Duration of the initiation period")]
        public double Duration
        {
            get
            {
                return _duration;
            }
            set
            {
                _duration = value;
            }
        }
    
        /// <summary>
        /// Whether to use a cue to signal the start of the period.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("has_cue")]
        [System.ComponentModel.DescriptionAttribute("Whether to use a cue to signal the start of the period.")]
        public bool HasCue
        {
            get
            {
                return _hasCue;
            }
            set
            {
                _hasCue = value;
            }
        }
    
        /// <summary>
        /// Whether to abort the trial if a choice is made during the initiation period.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("abort_on_force")]
        [System.ComponentModel.DescriptionAttribute("Whether to abort the trial if a choice is made during the initiation period.")]
        public bool AbortOnForce
        {
            get
            {
                return _abortOnForce;
            }
            set
            {
                _abortOnForce = value;
            }
        }
    
        /// <summary>
        /// Time out for the quiescence period
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("abort_on_force_threshold")]
        [System.ComponentModel.DescriptionAttribute("Time out for the quiescence period")]
        public double AbortOnForceThreshold
        {
            get
            {
                return _abortOnForceThreshold;
            }
            set
            {
                _abortOnForceThreshold = value;
            }
        }
    
        public System.IObservable<InitiationPeriod> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new InitiationPeriod(this)));
        }
    
        public System.IObservable<InitiationPeriod> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new InitiationPeriod(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("duration = " + _duration + ", ");
            stringBuilder.Append("has_cue = " + _hasCue + ", ");
            stringBuilder.Append("abort_on_force = " + _abortOnForce + ", ");
            stringBuilder.Append("abort_on_force_threshold = " + _abortOnForceThreshold);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class LogNormalDistribution : Distribution
    {
    
        private LogNormalDistributionParameters _distributionParameters;
    
        private TruncationParameters _truncationParameters;
    
        private ScalingParameters _scalingParameters;
    
        public LogNormalDistribution()
        {
        }
    
        protected LogNormalDistribution(LogNormalDistribution other) : 
                base(other)
        {
            _distributionParameters = other._distributionParameters;
            _truncationParameters = other._truncationParameters;
            _scalingParameters = other._scalingParameters;
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public LogNormalDistributionParameters DistributionParameters
        {
            get
            {
                return _distributionParameters;
            }
            set
            {
                _distributionParameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters TruncationParameters
        {
            get
            {
                return _truncationParameters;
            }
            set
            {
                _truncationParameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters ScalingParameters
        {
            get
            {
                return _scalingParameters;
            }
            set
            {
                _scalingParameters = value;
            }
        }
    
        public System.IObservable<LogNormalDistribution> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new LogNormalDistribution(this)));
        }
    
        public System.IObservable<LogNormalDistribution> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new LogNormalDistribution(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("distribution_parameters = " + _distributionParameters + ", ");
            stringBuilder.Append("truncation_parameters = " + _truncationParameters + ", ");
            stringBuilder.Append("scaling_parameters = " + _scalingParameters);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class LogNormalDistributionParameters
    {
    
        private string _family = "LogNormal";
    
        private double _mean = 0D;
    
        private double _std = 0D;
    
        public LogNormalDistributionParameters()
        {
        }
    
        protected LogNormalDistributionParameters(LogNormalDistributionParameters other)
        {
            _family = other._family;
            _mean = other._mean;
            _std = other._std;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Mean of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("mean")]
        [System.ComponentModel.DescriptionAttribute("Mean of the distribution")]
        public double Mean
        {
            get
            {
                return _mean;
            }
            set
            {
                _mean = value;
            }
        }
    
        /// <summary>
        /// Standard deviation of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("std")]
        [System.ComponentModel.DescriptionAttribute("Standard deviation of the distribution")]
        public double Std
        {
            get
            {
                return _std;
            }
            set
            {
                _std = value;
            }
        }
    
        public System.IObservable<LogNormalDistributionParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new LogNormalDistributionParameters(this)));
        }
    
        public System.IObservable<LogNormalDistributionParameters> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new LogNormalDistributionParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("family = " + _family + ", ");
            stringBuilder.Append("mean = " + _mean + ", ");
            stringBuilder.Append("std = " + _std);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class NormalDistribution : Distribution
    {
    
        private NormalDistributionParameters _distributionParameters;
    
        private TruncationParameters _truncationParameters;
    
        private ScalingParameters _scalingParameters;
    
        public NormalDistribution()
        {
        }
    
        protected NormalDistribution(NormalDistribution other) : 
                base(other)
        {
            _distributionParameters = other._distributionParameters;
            _truncationParameters = other._truncationParameters;
            _scalingParameters = other._scalingParameters;
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public NormalDistributionParameters DistributionParameters
        {
            get
            {
                return _distributionParameters;
            }
            set
            {
                _distributionParameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters TruncationParameters
        {
            get
            {
                return _truncationParameters;
            }
            set
            {
                _truncationParameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters ScalingParameters
        {
            get
            {
                return _scalingParameters;
            }
            set
            {
                _scalingParameters = value;
            }
        }
    
        public System.IObservable<NormalDistribution> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new NormalDistribution(this)));
        }
    
        public System.IObservable<NormalDistribution> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new NormalDistribution(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("distribution_parameters = " + _distributionParameters + ", ");
            stringBuilder.Append("truncation_parameters = " + _truncationParameters + ", ");
            stringBuilder.Append("scaling_parameters = " + _scalingParameters);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class NormalDistributionParameters
    {
    
        private string _family = "Normal";
    
        private double _mean = 0D;
    
        private double _std = 0D;
    
        public NormalDistributionParameters()
        {
        }
    
        protected NormalDistributionParameters(NormalDistributionParameters other)
        {
            _family = other._family;
            _mean = other._mean;
            _std = other._std;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Mean of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("mean")]
        [System.ComponentModel.DescriptionAttribute("Mean of the distribution")]
        public double Mean
        {
            get
            {
                return _mean;
            }
            set
            {
                _mean = value;
            }
        }
    
        /// <summary>
        /// Standard deviation of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("std")]
        [System.ComponentModel.DescriptionAttribute("Standard deviation of the distribution")]
        public double Std
        {
            get
            {
                return _std;
            }
            set
            {
                _std = value;
            }
        }
    
        public System.IObservable<NormalDistributionParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new NormalDistributionParameters(this)));
        }
    
        public System.IObservable<NormalDistributionParameters> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new NormalDistributionParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("family = " + _family + ", ");
            stringBuilder.Append("mean = " + _mean + ", ");
            stringBuilder.Append("std = " + _std);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class NumericalUpdater
    {
    
        private NumericalUpdaterOperation _operation = AindForceForagingDataSchema.AindForceForagingTask.NumericalUpdaterOperation.None;
    
        private NumericalUpdaterParameters _parameters;
    
        public NumericalUpdater()
        {
        }
    
        protected NumericalUpdater(NumericalUpdater other)
        {
            _operation = other._operation;
            _parameters = other._parameters;
        }
    
        /// <summary>
        /// Operation to perform on the parameter
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("operation")]
        [System.ComponentModel.DescriptionAttribute("Operation to perform on the parameter")]
        public NumericalUpdaterOperation Operation
        {
            get
            {
                return _operation;
            }
            set
            {
                _operation = value;
            }
        }
    
        /// <summary>
        /// Parameters of the updater
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the updater")]
        public NumericalUpdaterParameters Parameters
        {
            get
            {
                return _parameters;
            }
            set
            {
                _parameters = value;
            }
        }
    
        public System.IObservable<NumericalUpdater> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new NumericalUpdater(this)));
        }
    
        public System.IObservable<NumericalUpdater> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new NumericalUpdater(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("operation = " + _operation + ", ");
            stringBuilder.Append("parameters = " + _parameters);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum NumericalUpdaterOperation
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Offset")]
        Offset = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Gain")]
        Gain = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Set")]
        Set = 3,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="OffsetPercentage")]
        OffsetPercentage = 4,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class NumericalUpdaterParameters
    {
    
        private double _initialValue = 0D;
    
        private double _increment = 0D;
    
        private double _decrement = 0D;
    
        private double _minimum = 0D;
    
        private double _maximum = 0D;
    
        public NumericalUpdaterParameters()
        {
        }
    
        protected NumericalUpdaterParameters(NumericalUpdaterParameters other)
        {
            _initialValue = other._initialValue;
            _increment = other._increment;
            _decrement = other._decrement;
            _minimum = other._minimum;
            _maximum = other._maximum;
        }
    
        /// <summary>
        /// Initial value of the parameter
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("initial_value")]
        [System.ComponentModel.DescriptionAttribute("Initial value of the parameter")]
        public double InitialValue
        {
            get
            {
                return _initialValue;
            }
            set
            {
                _initialValue = value;
            }
        }
    
        /// <summary>
        /// Value to increment the parameter by
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("increment")]
        [System.ComponentModel.DescriptionAttribute("Value to increment the parameter by")]
        public double Increment
        {
            get
            {
                return _increment;
            }
            set
            {
                _increment = value;
            }
        }
    
        /// <summary>
        /// Value to decrement the parameter by
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("decrement")]
        [System.ComponentModel.DescriptionAttribute("Value to decrement the parameter by")]
        public double Decrement
        {
            get
            {
                return _decrement;
            }
            set
            {
                _decrement = value;
            }
        }
    
        /// <summary>
        /// Minimum value of the parameter
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("minimum")]
        [System.ComponentModel.DescriptionAttribute("Minimum value of the parameter")]
        public double Minimum
        {
            get
            {
                return _minimum;
            }
            set
            {
                _minimum = value;
            }
        }
    
        /// <summary>
        /// Minimum value of the parameter
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("maximum")]
        [System.ComponentModel.DescriptionAttribute("Minimum value of the parameter")]
        public double Maximum
        {
            get
            {
                return _maximum;
            }
            set
            {
                _maximum = value;
            }
        }
    
        public System.IObservable<NumericalUpdaterParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new NumericalUpdaterParameters(this)));
        }
    
        public System.IObservable<NumericalUpdaterParameters> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new NumericalUpdaterParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("initial_value = " + _initialValue + ", ");
            stringBuilder.Append("increment = " + _increment + ", ");
            stringBuilder.Append("decrement = " + _decrement + ", ");
            stringBuilder.Append("minimum = " + _minimum + ", ");
            stringBuilder.Append("maximum = " + _maximum);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class PerformanceCriteria
    {
    
        private string _criteria = "RewardRate";
    
        private double _threshold;
    
        public PerformanceCriteria()
        {
        }
    
        protected PerformanceCriteria(PerformanceCriteria other)
        {
            _criteria = other._criteria;
            _threshold = other._threshold;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("criteria")]
        public string Criteria
        {
            get
            {
                return _criteria;
            }
            set
            {
                _criteria = value;
            }
        }
    
        /// <summary>
        /// Reward rate to end the block
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("threshold", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Reward rate to end the block")]
        public double Threshold
        {
            get
            {
                return _threshold;
            }
            set
            {
                _threshold = value;
            }
        }
    
        public System.IObservable<PerformanceCriteria> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new PerformanceCriteria(this)));
        }
    
        public System.IObservable<PerformanceCriteria> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new PerformanceCriteria(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("criteria = " + _criteria + ", ");
            stringBuilder.Append("threshold = " + _threshold);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class PoissonDistribution : Distribution
    {
    
        private PoissonDistributionParameters _distributionParameters;
    
        private TruncationParameters _truncationParameters;
    
        private ScalingParameters _scalingParameters;
    
        public PoissonDistribution()
        {
        }
    
        protected PoissonDistribution(PoissonDistribution other) : 
                base(other)
        {
            _distributionParameters = other._distributionParameters;
            _truncationParameters = other._truncationParameters;
            _scalingParameters = other._scalingParameters;
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public PoissonDistributionParameters DistributionParameters
        {
            get
            {
                return _distributionParameters;
            }
            set
            {
                _distributionParameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters TruncationParameters
        {
            get
            {
                return _truncationParameters;
            }
            set
            {
                _truncationParameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters ScalingParameters
        {
            get
            {
                return _scalingParameters;
            }
            set
            {
                _scalingParameters = value;
            }
        }
    
        public System.IObservable<PoissonDistribution> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new PoissonDistribution(this)));
        }
    
        public System.IObservable<PoissonDistribution> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new PoissonDistribution(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("distribution_parameters = " + _distributionParameters + ", ");
            stringBuilder.Append("truncation_parameters = " + _truncationParameters + ", ");
            stringBuilder.Append("scaling_parameters = " + _scalingParameters);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class PoissonDistributionParameters
    {
    
        private string _family = "Poisson";
    
        private double _rate = 1D;
    
        public PoissonDistributionParameters()
        {
        }
    
        protected PoissonDistributionParameters(PoissonDistributionParameters other)
        {
            _family = other._family;
            _rate = other._rate;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Rate parameter of the Poisson process that generates the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rate")]
        [System.ComponentModel.DescriptionAttribute("Rate parameter of the Poisson process that generates the distribution")]
        public double Rate
        {
            get
            {
                return _rate;
            }
            set
            {
                _rate = value;
            }
        }
    
        public System.IObservable<PoissonDistributionParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new PoissonDistributionParameters(this)));
        }
    
        public System.IObservable<PoissonDistributionParameters> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new PoissonDistributionParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("family = " + _family + ", ");
            stringBuilder.Append("rate = " + _rate);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Defines a quiescence settings
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Defines a quiescence settings")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class QuiescencePeriod
    {
    
        private double _duration = 0D;
    
        private double _forceThreshold = 0D;
    
        private bool _hasCue = false;
    
        public QuiescencePeriod()
        {
        }
    
        protected QuiescencePeriod(QuiescencePeriod other)
        {
            _duration = other._duration;
            _forceThreshold = other._forceThreshold;
            _hasCue = other._hasCue;
        }
    
        /// <summary>
        /// Duration of the quiescence period
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("duration")]
        [System.ComponentModel.DescriptionAttribute("Duration of the quiescence period")]
        public double Duration
        {
            get
            {
                return _duration;
            }
            set
            {
                _duration = value;
            }
        }
    
        /// <summary>
        /// Time out for the quiescence period
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("force_threshold")]
        [System.ComponentModel.DescriptionAttribute("Time out for the quiescence period")]
        public double ForceThreshold
        {
            get
            {
                return _forceThreshold;
            }
            set
            {
                _forceThreshold = value;
            }
        }
    
        /// <summary>
        /// Whether to use a cue to signal the start of the period.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("has_cue")]
        [System.ComponentModel.DescriptionAttribute("Whether to use a cue to signal the start of the period.")]
        public bool HasCue
        {
            get
            {
                return _hasCue;
            }
            set
            {
                _hasCue = value;
            }
        }
    
        public System.IObservable<QuiescencePeriod> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new QuiescencePeriod(this)));
        }
    
        public System.IObservable<QuiescencePeriod> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new QuiescencePeriod(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("duration = " + _duration + ", ");
            stringBuilder.Append("force_threshold = " + _forceThreshold + ", ");
            stringBuilder.Append("has_cue = " + _hasCue);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class RandomWalk : BlockStatistics
    {
    
        public RandomWalk()
        {
        }
    
        protected RandomWalk(RandomWalk other) : 
                base(other)
        {
        }
    
        public System.IObservable<RandomWalk> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new RandomWalk(this)));
        }
    
        public System.IObservable<RandomWalk> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new RandomWalk(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return base.PrintMembers(stringBuilder);
        }
    }


    /// <summary>
    /// Defines a response period
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Defines a response period")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ResponsePeriod
    {
    
        private double _duration = 0D;
    
        private bool _hasCue = true;
    
        private bool _hasFeedback = false;
    
        public ResponsePeriod()
        {
        }
    
        protected ResponsePeriod(ResponsePeriod other)
        {
            _duration = other._duration;
            _hasCue = other._hasCue;
            _hasFeedback = other._hasFeedback;
        }
    
        /// <summary>
        /// Duration of the response period. I.e. the time the animal has to make a choice.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("duration")]
        [System.ComponentModel.DescriptionAttribute("Duration of the response period. I.e. the time the animal has to make a choice.")]
        public double Duration
        {
            get
            {
                return _duration;
            }
            set
            {
                _duration = value;
            }
        }
    
        /// <summary>
        /// Whether to use a cue to signal the start of the period.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("has_cue")]
        [System.ComponentModel.DescriptionAttribute("Whether to use a cue to signal the start of the period.")]
        public bool HasCue
        {
            get
            {
                return _hasCue;
            }
            set
            {
                _hasCue = value;
            }
        }
    
        /// <summary>
        /// Whether to provide feedback to the animal after the response period.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("has_feedback")]
        [System.ComponentModel.DescriptionAttribute("Whether to provide feedback to the animal after the response period.")]
        public bool HasFeedback
        {
            get
            {
                return _hasFeedback;
            }
            set
            {
                _hasFeedback = value;
            }
        }
    
        public System.IObservable<ResponsePeriod> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ResponsePeriod(this)));
        }
    
        public System.IObservable<ResponsePeriod> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ResponsePeriod(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("duration = " + _duration + ", ");
            stringBuilder.Append("has_cue = " + _hasCue + ", ");
            stringBuilder.Append("has_feedback = " + _hasFeedback);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class RewardRateCriteria
    {
    
        private string _criteria = "RewardRate";
    
        private double _threshold;
    
        public RewardRateCriteria()
        {
        }
    
        protected RewardRateCriteria(RewardRateCriteria other)
        {
            _criteria = other._criteria;
            _threshold = other._threshold;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("criteria")]
        public string Criteria
        {
            get
            {
                return _criteria;
            }
            set
            {
                _criteria = value;
            }
        }
    
        /// <summary>
        /// Reward rate to end the block
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("threshold", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Reward rate to end the block")]
        public double Threshold
        {
            get
            {
                return _threshold;
            }
            set
            {
                _threshold = value;
            }
        }
    
        public System.IObservable<RewardRateCriteria> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new RewardRateCriteria(this)));
        }
    
        public System.IObservable<RewardRateCriteria> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new RewardRateCriteria(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("criteria = " + _criteria + ", ");
            stringBuilder.Append("threshold = " + _threshold);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Scalar : Distribution
    {
    
        private ScalarDistributionParameter _distributionParameters;
    
        private TruncationParameters _truncationParameters;
    
        private ScalingParameters _scalingParameters;
    
        public Scalar()
        {
        }
    
        protected Scalar(Scalar other) : 
                base(other)
        {
            _distributionParameters = other._distributionParameters;
            _truncationParameters = other._truncationParameters;
            _scalingParameters = other._scalingParameters;
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public ScalarDistributionParameter DistributionParameters
        {
            get
            {
                return _distributionParameters;
            }
            set
            {
                _distributionParameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters TruncationParameters
        {
            get
            {
                return _truncationParameters;
            }
            set
            {
                _truncationParameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters ScalingParameters
        {
            get
            {
                return _scalingParameters;
            }
            set
            {
                _scalingParameters = value;
            }
        }
    
        public System.IObservable<Scalar> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Scalar(this)));
        }
    
        public System.IObservable<Scalar> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Scalar(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("distribution_parameters = " + _distributionParameters + ", ");
            stringBuilder.Append("truncation_parameters = " + _truncationParameters + ", ");
            stringBuilder.Append("scaling_parameters = " + _scalingParameters);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ScalarDistributionParameter
    {
    
        private string _family = "Scalar";
    
        private double _value = 0D;
    
        private TruncationParameters2 _truncationParameters;
    
        private ScalingParameters2 _scalingParameters;
    
        public ScalarDistributionParameter()
        {
        }
    
        protected ScalarDistributionParameter(ScalarDistributionParameter other)
        {
            _family = other._family;
            _value = other._value;
            _truncationParameters = other._truncationParameters;
            _scalingParameters = other._scalingParameters;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// The static value of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("value")]
        [System.ComponentModel.DescriptionAttribute("The static value of the distribution")]
        public double Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        public TruncationParameters2 TruncationParameters
        {
            get
            {
                return _truncationParameters;
            }
            set
            {
                _truncationParameters = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        public ScalingParameters2 ScalingParameters
        {
            get
            {
                return _scalingParameters;
            }
            set
            {
                _scalingParameters = value;
            }
        }
    
        public System.IObservable<ScalarDistributionParameter> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ScalarDistributionParameter(this)));
        }
    
        public System.IObservable<ScalarDistributionParameter> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ScalarDistributionParameter(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("family = " + _family + ", ");
            stringBuilder.Append("value = " + _value + ", ");
            stringBuilder.Append("truncation_parameters = " + _truncationParameters + ", ");
            stringBuilder.Append("scaling_parameters = " + _scalingParameters);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ScalingParameters
    {
    
        private double _scale = 1D;
    
        private double _offset = 0D;
    
        public ScalingParameters()
        {
        }
    
        protected ScalingParameters(ScalingParameters other)
        {
            _scale = other._scale;
            _offset = other._offset;
        }
    
        /// <summary>
        /// Scaling factor to apply on the sampled distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("scale")]
        [System.ComponentModel.DescriptionAttribute("Scaling factor to apply on the sampled distribution")]
        public double Scale
        {
            get
            {
                return _scale;
            }
            set
            {
                _scale = value;
            }
        }
    
        /// <summary>
        /// Offset factor to apply on the sampled distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("offset")]
        [System.ComponentModel.DescriptionAttribute("Offset factor to apply on the sampled distribution")]
        public double Offset
        {
            get
            {
                return _offset;
            }
            set
            {
                _offset = value;
            }
        }
    
        public System.IObservable<ScalingParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ScalingParameters(this)));
        }
    
        public System.IObservable<ScalingParameters> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ScalingParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("scale = " + _scale + ", ");
            stringBuilder.Append("offset = " + _offset);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class TimeCriteria
    {
    
        private string _criteria = "Time";
    
        private double _durationThreshold;
    
        public TimeCriteria()
        {
        }
    
        protected TimeCriteria(TimeCriteria other)
        {
            _criteria = other._criteria;
            _durationThreshold = other._durationThreshold;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("criteria")]
        public string Criteria
        {
            get
            {
                return _criteria;
            }
            set
            {
                _criteria = value;
            }
        }
    
        /// <summary>
        /// Duration to end the block
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("duration_threshold", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Duration to end the block")]
        public double DurationThreshold
        {
            get
            {
                return _durationThreshold;
            }
            set
            {
                _durationThreshold = value;
            }
        }
    
        public System.IObservable<TimeCriteria> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new TimeCriteria(this)));
        }
    
        public System.IObservable<TimeCriteria> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new TimeCriteria(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("criteria = " + _criteria + ", ");
            stringBuilder.Append("duration_threshold = " + _durationThreshold);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Defines a trial
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Defines a trial")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Trial
    {
    
        private double _interTrialInterval = 0D;
    
        private QuiescencePeriod _quiescencePeriod;
    
        private InitiationPeriod _initiationPeriod;
    
        private ResponsePeriod _responsePeriod;
    
        private HarvestAction _leftHarvest;
    
        private HarvestAction _rightHarvest;
    
        private double _timeOut = 0D;
    
        public Trial()
        {
        }
    
        protected Trial(Trial other)
        {
            _interTrialInterval = other._interTrialInterval;
            _quiescencePeriod = other._quiescencePeriod;
            _initiationPeriod = other._initiationPeriod;
            _responsePeriod = other._responsePeriod;
            _leftHarvest = other._leftHarvest;
            _rightHarvest = other._rightHarvest;
            _timeOut = other._timeOut;
        }
    
        /// <summary>
        /// Time between trials
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("inter_trial_interval")]
        [System.ComponentModel.DescriptionAttribute("Time between trials")]
        public double InterTrialInterval
        {
            get
            {
                return _interTrialInterval;
            }
            set
            {
                _interTrialInterval = value;
            }
        }
    
        /// <summary>
        /// Quiescence settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("quiescence_period")]
        [System.ComponentModel.DescriptionAttribute("Quiescence settings")]
        public QuiescencePeriod QuiescencePeriod
        {
            get
            {
                return _quiescencePeriod;
            }
            set
            {
                _quiescencePeriod = value;
            }
        }
    
        /// <summary>
        /// Initiation settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("initiation_period")]
        [System.ComponentModel.DescriptionAttribute("Initiation settings")]
        public InitiationPeriod InitiationPeriod
        {
            get
            {
                return _initiationPeriod;
            }
            set
            {
                _initiationPeriod = value;
            }
        }
    
        /// <summary>
        /// Response settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("response_period")]
        [System.ComponentModel.DescriptionAttribute("Response settings")]
        public ResponsePeriod ResponsePeriod
        {
            get
            {
                return _responsePeriod;
            }
            set
            {
                _responsePeriod = value;
            }
        }
    
        /// <summary>
        /// Specification of the left action
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("left_harvest")]
        [System.ComponentModel.DescriptionAttribute("Specification of the left action")]
        public HarvestAction LeftHarvest
        {
            get
            {
                return _leftHarvest;
            }
            set
            {
                _leftHarvest = value;
            }
        }
    
        /// <summary>
        /// Specification of the right action
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("right_harvest")]
        [System.ComponentModel.DescriptionAttribute("Specification of the right action")]
        public HarvestAction RightHarvest
        {
            get
            {
                return _rightHarvest;
            }
            set
            {
                _rightHarvest = value;
            }
        }
    
        /// <summary>
        /// Time out for the trial
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("time_out")]
        [System.ComponentModel.DescriptionAttribute("Time out for the trial")]
        public double TimeOut
        {
            get
            {
                return _timeOut;
            }
            set
            {
                _timeOut = value;
            }
        }
    
        public System.IObservable<Trial> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Trial(this)));
        }
    
        public System.IObservable<Trial> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Trial(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("inter_trial_interval = " + _interTrialInterval + ", ");
            stringBuilder.Append("quiescence_period = " + _quiescencePeriod + ", ");
            stringBuilder.Append("initiation_period = " + _initiationPeriod + ", ");
            stringBuilder.Append("response_period = " + _responsePeriod + ", ");
            stringBuilder.Append("left_harvest = " + _leftHarvest + ", ");
            stringBuilder.Append("right_harvest = " + _rightHarvest + ", ");
            stringBuilder.Append("time_out = " + _timeOut);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class TruncationParameters
    {
    
        private bool _isTruncated = false;
    
        private double _min = 0D;
    
        private double _max = 0D;
    
        public TruncationParameters()
        {
        }
    
        protected TruncationParameters(TruncationParameters other)
        {
            _isTruncated = other._isTruncated;
            _min = other._min;
            _max = other._max;
        }
    
        /// <summary>
        /// Whether the distribution is truncated
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("is_truncated")]
        [System.ComponentModel.DescriptionAttribute("Whether the distribution is truncated")]
        public bool IsTruncated
        {
            get
            {
                return _isTruncated;
            }
            set
            {
                _isTruncated = value;
            }
        }
    
        /// <summary>
        /// Minimum value of the sampled distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("min")]
        [System.ComponentModel.DescriptionAttribute("Minimum value of the sampled distribution")]
        public double Min
        {
            get
            {
                return _min;
            }
            set
            {
                _min = value;
            }
        }
    
        /// <summary>
        /// Maximum value of the sampled distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("max")]
        [System.ComponentModel.DescriptionAttribute("Maximum value of the sampled distribution")]
        public double Max
        {
            get
            {
                return _max;
            }
            set
            {
                _max = value;
            }
        }
    
        public System.IObservable<TruncationParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new TruncationParameters(this)));
        }
    
        public System.IObservable<TruncationParameters> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new TruncationParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("is_truncated = " + _isTruncated + ", ");
            stringBuilder.Append("min = " + _min + ", ");
            stringBuilder.Append("max = " + _max);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class UniformDistribution : Distribution
    {
    
        private UniformDistributionParameters _distributionParameters;
    
        private TruncationParameters _truncationParameters;
    
        private ScalingParameters _scalingParameters;
    
        public UniformDistribution()
        {
        }
    
        protected UniformDistribution(UniformDistribution other) : 
                base(other)
        {
            _distributionParameters = other._distributionParameters;
            _truncationParameters = other._truncationParameters;
            _scalingParameters = other._scalingParameters;
        }
    
        /// <summary>
        /// Parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("distribution_parameters")]
        [System.ComponentModel.DescriptionAttribute("Parameters of the distribution")]
        public UniformDistributionParameters DistributionParameters
        {
            get
            {
                return _distributionParameters;
            }
            set
            {
                _distributionParameters = value;
            }
        }
    
        /// <summary>
        /// Truncation parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("truncation_parameters")]
        [System.ComponentModel.DescriptionAttribute("Truncation parameters of the distribution")]
        public TruncationParameters TruncationParameters
        {
            get
            {
                return _truncationParameters;
            }
            set
            {
                _truncationParameters = value;
            }
        }
    
        /// <summary>
        /// Scaling parameters of the distribution
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("scaling_parameters")]
        [System.ComponentModel.DescriptionAttribute("Scaling parameters of the distribution")]
        public ScalingParameters ScalingParameters
        {
            get
            {
                return _scalingParameters;
            }
            set
            {
                _scalingParameters = value;
            }
        }
    
        public System.IObservable<UniformDistribution> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new UniformDistribution(this)));
        }
    
        public System.IObservable<UniformDistribution> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new UniformDistribution(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("distribution_parameters = " + _distributionParameters + ", ");
            stringBuilder.Append("truncation_parameters = " + _truncationParameters + ", ");
            stringBuilder.Append("scaling_parameters = " + _scalingParameters);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class UniformDistributionParameters
    {
    
        private string _family = "Uniform";
    
        private double _min = 0D;
    
        private double _max = 0D;
    
        public UniformDistributionParameters()
        {
        }
    
        protected UniformDistributionParameters(UniformDistributionParameters other)
        {
            _family = other._family;
            _min = other._min;
            _max = other._max;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("family")]
        public string Family
        {
            get
            {
                return _family;
            }
            set
            {
                _family = value;
            }
        }
    
        /// <summary>
        /// Minimum value of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("min")]
        [System.ComponentModel.DescriptionAttribute("Minimum value of the distribution")]
        public double Min
        {
            get
            {
                return _min;
            }
            set
            {
                _min = value;
            }
        }
    
        /// <summary>
        /// Maximum value of the distribution
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("max")]
        [System.ComponentModel.DescriptionAttribute("Maximum value of the distribution")]
        public double Max
        {
            get
            {
                return _max;
            }
            set
            {
                _max = value;
            }
        }
    
        public System.IObservable<UniformDistributionParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new UniformDistributionParameters(this)));
        }
    
        public System.IObservable<UniformDistributionParameters> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new UniformDistributionParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("family = " + _family + ", ");
            stringBuilder.Append("min = " + _min + ", ");
            stringBuilder.Append("max = " + _max);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class AindForceForagingTaskLogic
    {
    
        private string _describedBy = "";
    
        private string _schemaVersion = "0.1.0-preview01";
    
        private Environment _environment = new Environment();
    
        private System.Collections.Generic.IDictionary<string, NumericalUpdater> _updaters;
    
        public AindForceForagingTaskLogic()
        {
        }
    
        protected AindForceForagingTaskLogic(AindForceForagingTaskLogic other)
        {
            _describedBy = other._describedBy;
            _schemaVersion = other._schemaVersion;
            _environment = other._environment;
            _updaters = other._updaters;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("describedBy")]
        public string DescribedBy
        {
            get
            {
                return _describedBy;
            }
            set
            {
                _describedBy = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("schema_version")]
        public string SchemaVersion
        {
            get
            {
                return _schemaVersion;
            }
            set
            {
                _schemaVersion = value;
            }
        }
    
        /// <summary>
        /// Environment settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("environment", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Environment settings")]
        public Environment Environment
        {
            get
            {
                return _environment;
            }
            set
            {
                _environment = value;
            }
        }
    
        /// <summary>
        /// List of numerical updaters
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("updaters")]
        [System.ComponentModel.DescriptionAttribute("List of numerical updaters")]
        public System.Collections.Generic.IDictionary<string, NumericalUpdater> Updaters
        {
            get
            {
                return _updaters;
            }
            set
            {
                _updaters = value;
            }
        }
    
        public System.IObservable<AindForceForagingTaskLogic> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AindForceForagingTaskLogic(this)));
        }
    
        public System.IObservable<AindForceForagingTaskLogic> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AindForceForagingTaskLogic(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("describedBy = " + _describedBy + ", ");
            stringBuilder.Append("schema_version = " + _schemaVersion + ", ");
            stringBuilder.Append("environment = " + _environment + ", ");
            stringBuilder.Append("updaters = " + _updaters);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class TruncationParameters2
    {
    
        public TruncationParameters2()
        {
        }
    
        protected TruncationParameters2(TruncationParameters2 other)
        {
        }
    
        public System.IObservable<TruncationParameters2> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new TruncationParameters2(this)));
        }
    
        public System.IObservable<TruncationParameters2> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new TruncationParameters2(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ScalingParameters2
    {
    
        public ScalingParameters2()
        {
        }
    
        protected ScalingParameters2(ScalingParameters2 other)
        {
        }
    
        public System.IObservable<ScalingParameters2> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ScalingParameters2(this)));
        }
    
        public System.IObservable<ScalingParameters2> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ScalingParameters2(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface, AllowMultiple = true)]
    internal class JsonInheritanceAttribute : System.Attribute
    {
        public JsonInheritanceAttribute(string key, System.Type type)
        {
            Key = key;
            Type = type;
        }

        public string Key { get; private set; }

        public System.Type Type { get; private set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public class JsonInheritanceConverter : Newtonsoft.Json.JsonConverter
    {
        internal static readonly string DefaultDiscriminatorName = "discriminator";

        private readonly string _discriminatorName;

        [System.ThreadStatic]
        private static bool _isReading;

        [System.ThreadStatic]
        private static bool _isWriting;

        public JsonInheritanceConverter()
        {
            _discriminatorName = DefaultDiscriminatorName;
        }

        public JsonInheritanceConverter(string discriminatorName)
        {
            _discriminatorName = discriminatorName;
        }

        public string DiscriminatorName { get { return _discriminatorName; } }

        public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
        {
            try
            {
                _isWriting = true;

                var jObject = Newtonsoft.Json.Linq.JObject.FromObject(value, serializer);
                jObject.AddFirst(new Newtonsoft.Json.Linq.JProperty(_discriminatorName, GetSubtypeDiscriminator(value.GetType())));
                writer.WriteToken(jObject.CreateReader());
            }
            finally
            {
                _isWriting = false;
            }
        }

        public override bool CanWrite
        {
            get
            {
                if (_isWriting)
                {
                    _isWriting = false;
                    return false;
                }
                return true;
            }
        }

        public override bool CanRead
        {
            get
            {
                if (_isReading)
                {
                    _isReading = false;
                    return false;
                }
                return true;
            }
        }

        public override bool CanConvert(System.Type objectType)
        {
            return true;
        }

        public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
        {
            var jObject = serializer.Deserialize<Newtonsoft.Json.Linq.JObject>(reader);
            if (jObject == null)
                return null;

            var discriminatorValue = jObject.GetValue(_discriminatorName);
            var discriminator = discriminatorValue != null ? Newtonsoft.Json.Linq.Extensions.Value<string>(discriminatorValue) : null;
            var subtype = GetObjectSubtype(objectType, discriminator);

            var objectContract = serializer.ContractResolver.ResolveContract(subtype) as Newtonsoft.Json.Serialization.JsonObjectContract;
            if (objectContract == null || System.Linq.Enumerable.All(objectContract.Properties, p => p.PropertyName != _discriminatorName))
            {
                jObject.Remove(_discriminatorName);
            }

            try
            {
                _isReading = true;
                return serializer.Deserialize(jObject.CreateReader(), subtype);
            }
            finally
            {
                _isReading = false;
            }
        }

        private System.Type GetObjectSubtype(System.Type objectType, string discriminator)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Key == discriminator)
                    return attribute.Type;
            }

            return objectType;
        }

        private string GetSubtypeDiscriminator(System.Type objectType)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Type == objectType)
                    return attribute.Key;
            }

            return objectType.Name;
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Combinator)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Block>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BlockGenerator>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RandomWalk>))]
    public partial class MatchBlockStatistics : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = Type;
            var returnType = typeMapping != null ? typeMapping.GetType().GetGenericArguments()[0] : typeof(BlockStatistics);
            return System.Linq.Expressions.Expression.Call(
                typeof(MatchBlockStatistics),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

    
        private static System.IObservable<TResult> Process<TResult>(System.IObservable<BlockStatistics> source)
            where TResult : BlockStatistics
        {
            return System.Reactive.Linq.Observable.Create<TResult>(observer =>
            {
                var sourceObserver = System.Reactive.Observer.Create<BlockStatistics>(
                    value =>
                    {
                        var match = value as TResult;
                        if (match != null) observer.OnNext(match);
                    },
                    observer.OnError,
                    observer.OnCompleted);
                return System.ObservableExtensions.SubscribeSafe(source, sourceObserver);
            });
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Combinator)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Scalar>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<NormalDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LogNormalDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ExponentialDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<UniformDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PoissonDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BinomialDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BetaDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<GammaDistribution>))]
    public partial class MatchDistribution : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = Type;
            var returnType = typeMapping != null ? typeMapping.GetType().GetGenericArguments()[0] : typeof(Distribution);
            return System.Linq.Expressions.Expression.Call(
                typeof(MatchDistribution),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

    
        private static System.IObservable<TResult> Process<TResult>(System.IObservable<Distribution> source)
            where TResult : Distribution
        {
            return System.Reactive.Linq.Observable.Create<TResult>(observer =>
            {
                var sourceObserver = System.Reactive.Observer.Create<Distribution>(
                    value =>
                    {
                        var match = value as TResult;
                        if (match != null) observer.OnNext(match);
                    },
                    observer.OnError,
                    observer.OnCompleted);
                return System.ObservableExtensions.SubscribeSafe(source, sourceObserver);
            });
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into JSON strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into JSON strings.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    public partial class SerializeToJson
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.SerializeObject(value));
        }

        public System.IObservable<string> Process(System.IObservable<BetaDistribution> source)
        {
            return Process<BetaDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BetaDistributionParameters> source)
        {
            return Process<BetaDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BinomialDistribution> source)
        {
            return Process<BinomialDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BinomialDistributionParameters> source)
        {
            return Process<BinomialDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Block> source)
        {
            return Process<Block>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BlockGenerator> source)
        {
            return Process<BlockGenerator>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BlockStatistics> source)
        {
            return Process<BlockStatistics>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Distribution> source)
        {
            return Process<Distribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<EndBlockCriteria> source)
        {
            return Process<EndBlockCriteria>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Environment> source)
        {
            return Process<Environment>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ExponentialDistribution> source)
        {
            return Process<ExponentialDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ExponentialDistributionParameters> source)
        {
            return Process<ExponentialDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<GammaDistribution> source)
        {
            return Process<GammaDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<GammaDistributionParameters> source)
        {
            return Process<GammaDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarvestAction> source)
        {
            return Process<HarvestAction>(source);
        }

        public System.IObservable<string> Process(System.IObservable<InitiationPeriod> source)
        {
            return Process<InitiationPeriod>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LogNormalDistribution> source)
        {
            return Process<LogNormalDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LogNormalDistributionParameters> source)
        {
            return Process<LogNormalDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<NormalDistribution> source)
        {
            return Process<NormalDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<NormalDistributionParameters> source)
        {
            return Process<NormalDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<NumericalUpdater> source)
        {
            return Process<NumericalUpdater>(source);
        }

        public System.IObservable<string> Process(System.IObservable<NumericalUpdaterParameters> source)
        {
            return Process<NumericalUpdaterParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PerformanceCriteria> source)
        {
            return Process<PerformanceCriteria>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PoissonDistribution> source)
        {
            return Process<PoissonDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PoissonDistributionParameters> source)
        {
            return Process<PoissonDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<QuiescencePeriod> source)
        {
            return Process<QuiescencePeriod>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RandomWalk> source)
        {
            return Process<RandomWalk>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ResponsePeriod> source)
        {
            return Process<ResponsePeriod>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RewardRateCriteria> source)
        {
            return Process<RewardRateCriteria>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Scalar> source)
        {
            return Process<Scalar>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ScalarDistributionParameter> source)
        {
            return Process<ScalarDistributionParameter>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ScalingParameters> source)
        {
            return Process<ScalingParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TimeCriteria> source)
        {
            return Process<TimeCriteria>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Trial> source)
        {
            return Process<Trial>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TruncationParameters> source)
        {
            return Process<TruncationParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<UniformDistribution> source)
        {
            return Process<UniformDistribution>(source);
        }

        public System.IObservable<string> Process(System.IObservable<UniformDistributionParameters> source)
        {
            return Process<UniformDistributionParameters>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindForceForagingTaskLogic> source)
        {
            return Process<AindForceForagingTaskLogic>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TruncationParameters2> source)
        {
            return Process<TruncationParameters2>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ScalingParameters2> source)
        {
            return Process<ScalingParameters2>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of JSON strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of JSON strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BetaDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BetaDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BinomialDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BinomialDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Block>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BlockGenerator>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BlockStatistics>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Distribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<EndBlockCriteria>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Environment>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ExponentialDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ExponentialDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<GammaDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<GammaDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarvestAction>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<InitiationPeriod>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LogNormalDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LogNormalDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<NormalDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<NormalDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<NumericalUpdater>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<NumericalUpdaterParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PerformanceCriteria>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PoissonDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PoissonDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<QuiescencePeriod>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RandomWalk>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ResponsePeriod>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RewardRateCriteria>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Scalar>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ScalarDistributionParameter>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ScalingParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TimeCriteria>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Trial>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TruncationParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<UniformDistribution>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<UniformDistributionParameters>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindForceForagingTaskLogic>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TruncationParameters2>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ScalingParameters2>))]
    public partial class DeserializeFromJson : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromJson()
        {
            Type = new Bonsai.Expressions.TypeMapping<AindForceForagingTaskLogic>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromJson),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.DeserializeObject<T>(value));
        }
    }
}